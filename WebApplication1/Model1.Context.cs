//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SushiTest1Entities1 : DbContext
    {
        public SushiTest1Entities1()
            : base("name=SushiTest1Entities42")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderStatu> OrderStatus { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductWeightDetail> ProductWeightDetails { get; set; }
        public virtual DbSet<Massage> Massages { get; set; }
        public virtual DbSet<OrdersTimeChanged> OrdersTimeChangeds { get; set; }
    
        public virtual int AddProduct(Nullable<int> catId, string nameRus, string nameUkr, Nullable<int> numOfOrders, Nullable<int> count, string energy, Nullable<int> balance, Nullable<decimal> price, Nullable<bool> isSale, Nullable<bool> isHided, string rusIngr, string ukrIngr)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("catId", catId) :
                new ObjectParameter("catId", typeof(int));
    
            var nameRusParameter = nameRus != null ?
                new ObjectParameter("nameRus", nameRus) :
                new ObjectParameter("nameRus", typeof(string));
    
            var nameUkrParameter = nameUkr != null ?
                new ObjectParameter("nameUkr", nameUkr) :
                new ObjectParameter("nameUkr", typeof(string));
    
            var numOfOrdersParameter = numOfOrders.HasValue ?
                new ObjectParameter("numOfOrders", numOfOrders) :
                new ObjectParameter("numOfOrders", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var energyParameter = energy != null ?
                new ObjectParameter("energy", energy) :
                new ObjectParameter("energy", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("isSale", isSale) :
                new ObjectParameter("isSale", typeof(bool));
    
            var isHidedParameter = isHided.HasValue ?
                new ObjectParameter("isHided", isHided) :
                new ObjectParameter("isHided", typeof(bool));
    
            var rusIngrParameter = rusIngr != null ?
                new ObjectParameter("RusIngr", rusIngr) :
                new ObjectParameter("RusIngr", typeof(string));
    
            var ukrIngrParameter = ukrIngr != null ?
                new ObjectParameter("UkrIngr", ukrIngr) :
                new ObjectParameter("UkrIngr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", catIdParameter, nameRusParameter, nameUkrParameter, numOfOrdersParameter, countParameter, energyParameter, balanceParameter, priceParameter, isSaleParameter, isHidedParameter, rusIngrParameter, ukrIngrParameter);
        }
    
        public virtual ObjectResult<AllDishes_Result> AllDishes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllDishes_Result>("AllDishes");
        }
    
        public virtual int DelOrdersDetailsId(string item)
        {
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOrdersDetailsId", itemParameter);
        }
    
        public virtual int DelOrdersTimeChanged(string item)
        {
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelOrdersTimeChanged", itemParameter);
        }
    
        public virtual ObjectResult<FindCategory_Result> FindCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindCategory_Result>("FindCategory", categoryNameParameter);
        }
    
        public virtual ObjectResult<FindDishes_Result> FindDishes(string dishName)
        {
            var dishNameParameter = dishName != null ?
                new ObjectParameter("DishName", dishName) :
                new ObjectParameter("DishName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindDishes_Result>("FindDishes", dishNameParameter);
        }
    
        public virtual ObjectResult<FindOrders_Result> FindOrders(string order)
        {
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindOrders_Result>("FindOrders", orderParameter);
        }
    
        public virtual int InsertValOrdTimeCh(Nullable<int> ordID, Nullable<int> ordStatus)
        {
            var ordIDParameter = ordID.HasValue ?
                new ObjectParameter("OrdID", ordID) :
                new ObjectParameter("OrdID", typeof(int));
    
            var ordStatusParameter = ordStatus.HasValue ?
                new ObjectParameter("OrdStatus", ordStatus) :
                new ObjectParameter("OrdStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertValOrdTimeCh", ordIDParameter, ordStatusParameter);
        }
    
        public virtual ObjectResult<ShowAllCategories_Result> ShowAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowAllCategories_Result>("ShowAllCategories");
        }
    
        public virtual ObjectResult<ShowAllOrders_Result> ShowAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowAllOrders_Result>("ShowAllOrders");
        }
    
        public virtual ObjectResult<ShowUnprocessedOrders_Result> ShowUnprocessedOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowUnprocessedOrders_Result>("ShowUnprocessedOrders");
        }
    
        public virtual int UpdateCategory(Nullable<int> categoryId, string newRusName, string newUkrName, Nullable<int> newPriority)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var newRusNameParameter = newRusName != null ?
                new ObjectParameter("NewRusName", newRusName) :
                new ObjectParameter("NewRusName", typeof(string));
    
            var newUkrNameParameter = newUkrName != null ?
                new ObjectParameter("NewUkrName", newUkrName) :
                new ObjectParameter("NewUkrName", typeof(string));
    
            var newPriorityParameter = newPriority.HasValue ?
                new ObjectParameter("NewPriority", newPriority) :
                new ObjectParameter("NewPriority", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategory", categoryIdParameter, newRusNameParameter, newUkrNameParameter, newPriorityParameter);
        }
    }
}
